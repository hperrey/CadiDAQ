/**
 * Parse the UTF8 ".ini" file via the Boost property_tree
 */

#include <string>
#include <fstream>
#include <iostream>
#include <iomanip> // std::hex

#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/ini_parser.hpp>
#include <boost/program_options.hpp>
#include <boost/optional.hpp>
#include <boost/algorithm/string.hpp>

#include <CaenEnum2Str.hpp> // generated by CMake

/* namespace alias */
namespace po = boost::program_options;
namespace pt = boost::property_tree;

namespace cadidaq {
  class connectionSettings;
}

class cadidaq::connectionSettings {
public:
  connectionSettings(){;}
  ~connectionSettings(){;}

  int linkType;
  int linkNum;
  int conetNode;
  uint32_t vmeBaseAddress;
};


template <class CAEN_ENUM> boost::optional<CAEN_ENUM> iFindStringInBimap(boost::bimap< std::string, CAEN_ENUM > map, std::string str){
  typedef typename boost::bimap< std::string, CAEN_ENUM >::left_const_iterator const_iterator;
  for( const_iterator i = map.left.begin(), iend = map.left.end(); i != iend; ++i ){
      if(boost::iequals(boost::algorithm::to_lower_copy(i->first), str))
        return i->second;
    }
  return boost::none;
}

enum class parseDirection {READING, WRITING};

template <class VALUE> void parseSetting(std::string settingName, pt::iptree *node, boost::optional<VALUE>& settingValue, parseDirection direction){
  if (direction == parseDirection::READING){
    // get the setting's value from the ptree
    settingValue = node->get_optional<VALUE>(settingName);
    if (settingValue) {
      std::cout << "found key " << settingName << " with value '" << *settingValue << "'" << std::endl;
    } else {
      std::cout << "could not find key '" << settingName << "'" << std::endl;
    }
    // erase value from ptree as it has been successfully parsed
    // NOTE: this will only erase a single instance of the key; if the key exists several times, the other entries remain!
    node->erase(settingName);
  } else {
    // direction: WRITING
    // add key to ptree if the setting's value has been set
    if (settingValue) {
      node->put(settingName, *settingValue);
    } else {
      std::cout << "missing key '" << settingName << "' when generating config ptree " << std::endl;
    }
  }
}

template <class VALUE> void parseSetting(std::string settingName, pt::iptree *node, boost::optional<VALUE>& settingValue, parseDirection direction, int base){
  if (direction == parseDirection::READING){
    // get the setting's value from the ptree
    boost::optional<std::string> str;
    parseSetting(settingName, node, str, direction);
    if (str) {
      // verify that we are dealing with a hex (0xXXXX) string
      if (str->size()>2)
        if(str->substr(0,2) != "0x" && base == 16){
          base = 10; // reset to base 10
          std::cout << " key '" << settingName << "' with string value '" << *str << "' does not appear to be a hex value, handling as base 10 instead." << std::endl;
        }
      settingValue = std::stoul(*str, nullptr, base); // TODO: handle exceptions and remaining, unconverted characters
      std::cout << " key '" << settingName << "' with string value '" << *str << "' converted to value " << *settingValue << std::endl;
    } else {
      settingValue = boost::none;
    }
  } else {
    // direction: WRITING
    boost::optional<std::string> strvalue;
    if (base==10){
      strvalue = std::to_string(*settingValue);
    } else if (base==16){
      std::stringstream ss;
      ss << std::hex << std::showbase << settingValue; // might need e.g. std::setfill ('0') and std::setw(sizeof(your_type)*2)
      strvalue = ss.str();
    } else {
      // base not yet implemented:
      throw std::out_of_range (std::string("Base value not implemented in parseSetting: ") + std::to_string(base));
    }
    // add key to ptree
    parseSetting(settingName, node, strvalue, direction);
  }
}

template <class CAEN_ENUM, typename VALUE> void parseSetting(std::string settingName, pt::iptree *node, boost::optional<VALUE>& settingValue, boost::bimap< std::string, CAEN_ENUM > map, parseDirection direction){
  if (direction == parseDirection::READING){
    boost::optional<std::string> str;
    // get the setting's value from the ptree and append
    parseSetting(settingName, node, str, direction);
    if (str){
      settingValue = iFindStringInBimap(map, std::string("CAEN_DGTZ_") + *str); // match the enum nanming convention in CAEN's driver

      std::cout << " value of key " << settingName << " with value '" << *str << "' converted to value " << *settingValue << " (" << map.right.at(static_cast<CAEN_ENUM>(*settingValue)) << ")" << std::endl;
    } else {
      settingValue = boost::none;
    }
  } else {
    // direction: WRITING

    // check that setting's value (boost::optional) is actually set
    if (!settingValue) return;
    // find the string corresponding to the setting's enum value in the bimap
    boost::optional<std::string> strvalue = map.right.at(static_cast<CAEN_ENUM>(*settingValue));
    // remove the first part originating from CAEN's enum naming convention ("CAEN_DGTZ_")
    strvalue->erase(0,10);
    // add key to ptree
    parseSetting(settingName, node, strvalue, direction);
  }
}

  void parseConnectionSettings(cadidaq::connectionSettings* settings, pt::iptree *node, std::string secname, parseDirection direction){
    // this routine implements the calls to ParseSetting for individual settings read from config or stored internally
    std::cout << "ptree for digitizer section '" << secname << "'" << std::endl;
    /* Loop over all sub sections and keys */
    for (auto& key : *node){
      std::cout << "\t" << key.first << " = " << key.second.get_value<std::string>() << std::endl;
    }

    cadidaq::CaenEnum2str converter;
    boost::optional<int> linkType;
    boost::optional<int> linkNum;
    boost::optional<int> conetNode;
    boost::optional<uint32_t> vmeBaseAddress;

    parseSetting("LinkType", node, linkType, converter.bm_CAEN_DGTZ_ConnectionType, direction);
    parseSetting("LinkNum", node, linkNum, direction);
    parseSetting("ConetNode", node, conetNode, direction);
    parseSetting("VMEBaseAddress", node, vmeBaseAddress, direction, 16);



    std::cout << std::endl << "ptree after parsing (remaining entries are unparsed): " << std::endl;
    /* Loop over all sub sections and keys */
    for (auto& key : *node){
      std::cout << "\t" << key.first << " = " << key.second.get_value<std::string>() << std::endl;
    }
  }

void read_ini_file(const char *filename)
{

    /* Open the UTF8 .ini file */
    std::ifstream iniStream(filename);

    /* Parse the .ini file via boost::property_tree::ini_parser */
    pt::iptree iniPTree; // ptree w/ case-insensitive comparisons
    pt::ini_parser::read_ini(iniStream, iniPTree);

    printf("\n\nFull config::\n");
    /* Loop over all sections and keys */
    for (auto& section : iniPTree){
      std::cout << '[' << section.first << "]" << std::endl;
      for (auto& key : section.second)
        std::cout << key.first << "=" << key.second.get_value<std::string>() << std::endl;
    }

    printf("\n\nReading individual keys:\n");

    /* Read the strings */
    boost::optional<std::string> strVal =
      iniPTree.get_optional<std::string>("digi1.linktype");
    std::string ret = strVal.get_value_or(std::string("default"));

    printf("digi1.LinkType=%s\n", ret.c_str());

    strVal = iniPTree.get_optional<std::string>("digi1.name");
    ret = strVal.get_value_or(std::string("default"));
    printf("digi1.name=%s\n", ret.c_str());

    /* Read the number */
    boost::optional<uint32_t> numVal =
        iniPTree.get_optional<uint32_t>("app.number");
    const uint32_t numValDefault = 111;
    std::cout << "app.number="
        << numVal.get_value_or(numValDefault)
        << std::endl;

    // parse the config file to determine number of digitizers
    int NDigitizer = 0;
    for (auto& section : iniPTree){
      if(boost::iequals(boost::algorithm::to_lower_copy(section.first), std::string("daq")))
        continue;
      if(boost::iequals(boost::algorithm::to_lower_copy(section.first), std::string("general")))
        continue;
      NDigitizer++;
    }
    std::cout << "Configuration for " << NDigitizer << " digitizer(s) found in config file." << std::endl;

    // get the connection details for each digitizer section
    for (auto& section : iniPTree){
      if(boost::iequals(boost::algorithm::to_lower_copy(section.first), std::string("daq")))
        continue;
      if(boost::iequals(boost::algorithm::to_lower_copy(section.first), std::string("general")))
        continue;
      pt::iptree &node = iniPTree.get_child(section.first);
      cadidaq::connectionSettings* settings = new cadidaq::connectionSettings();
      parseConnectionSettings(settings, &node, section.first, parseDirection::READING);
    }



}

int main(int argc, char **argv)
{
    po::options_description desc("MainOptions");
    desc.add_options()
        ("help,h", "Print help message")
        ("file,f", 
            po::value<std::string>()->default_value("test.ini"),
            "The test .ini file");

    po::variables_map vm;
    try
    {
        po::store(po::parse_command_line(argc, argv, desc), vm);
    }
    catch (po::error &e)
    {
        /* Invalid options */
        std::cerr << "ERROR: " << e.what() << std::endl << std::endl;
        std::cout << "Boost property_tree tester:" << std::endl
            << desc << std::endl;
        return 0;
    }

    if (vm.count("help"))
    {
        /* print usage */
        std::cout << "Boost property_tree tester:" << std::endl
                  << desc << std::endl;
        return 0;
    }

    std::string iniFile = vm["file"].as<std::string>().c_str();
    std::cout << "Read ini file: " << iniFile << std::endl;
    read_ini_file(iniFile.c_str());
    return 0;
}

